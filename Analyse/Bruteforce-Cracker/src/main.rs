//from tqdm import tqdm

use indicatif::{ProgressBar, ProgressStyle};
use std::str::Chars;
use std::sync::mpsc::channel;
use std::time::Duration;

const KEY: u32 = 0x84d245bd;
const CHARS: &str = "abcdefghijklmnopqrstuvwxyz0123456789";

struct AlphaNumIter<'a> {
    deep: usize,
    max: usize,
    child: Option<Box<AlphaNumIter<'a>>>,
    last_tail: String,
    chars: Chars<'a>,
}

impl<'a> AlphaNumIter<'a> {
    fn new(deep: usize, max: usize) -> Self {
        Self {
            deep,
            max,
            child: None,
            last_tail: "".into(),
            chars: CHARS.chars(),
        }
    }
}

impl<'a> Iterator for AlphaNumIter<'a> {
    type Item = String;

    fn next(&mut self) -> Option<Self::Item> {
        match self.chars.next() {
            Some(c) => Some(format!("{}{}", c, self.last_tail)),
            None => {
                self.chars = CHARS.chars();
                match &mut self.child {
                    Some(child) => match child.next() {
                        Some(tail) => {
                            self.last_tail = tail;
                            self.next()
                        }
                        None => None,
                    },
                    None => {
                        if self.deep < self.max {
                            let mut child = AlphaNumIter::new(self.deep + 1, self.max);
                            match child.next() {
                                Some(tail) => {
                                    self.last_tail = tail;
                                    self.child = Some(Box::new(child));
                                    self.next()
                                }
                                None => None,
                            }
                        } else {
                            None
                        }
                    }
                }
            }
        }
    }
}

fn compute_key(input: String) -> u32 {
    let mut acc = 0u32;
    for c in input.chars() {
        (acc, _) = acc.overflowing_add(c as u32);
        (acc, _) = acc.overflowing_mul(0x401);
        let mut tmp = acc;
        tmp >>= 6;
        acc ^= tmp;
    }
    let mut tmp = 8;
    (tmp, _) = acc.overflowing_mul(tmp);
    (acc, _) = acc.overflowing_add(tmp);

    let mut tmp = acc;
    tmp >>= 11;
    tmp ^= acc;
    (tmp, _) = tmp.overflowing_mul(0x8001);
    acc = tmp;
    acc
}

fn main() {
    let (tx, rx) = channel();
    ctrlc::set_handler(move || {
        tx.send(()).unwrap();
    })
    .unwrap();

    let it = AlphaNumIter::new(0, 64);
    let pb = ProgressBar::new_spinner();
    pb.set_style(
        ProgressStyle::default_spinner()
            .template("{spinner:.green} [{elapsed_precise}] Bruteforcing: {msg}")
            .unwrap(),
    );
    pb.set_message("No match found yet");
    pb.enable_steady_tick(Duration::from_millis(1000));
    let mut results = vec![];
    let mut tries = 0;
    for s in it {
        if rx.try_recv().is_ok() {
            break;
        }
        let res = compute_key(s.clone());
        if res == KEY {
            results.push(s.clone());
            pb.set_message(format!(
                "Found {} matches, last match: \"{s}\"",
                results.len()
            ));
        }
        tries += 1;
    }
    pb.finish_and_clear();

    println!("Finished after {tries} tries!");
    for r in results {
        println!("\"{r}\"");
    }
}

// git avec solution
// diapos
//
