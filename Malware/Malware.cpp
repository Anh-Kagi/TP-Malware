#include "stdafx.h"

#include <iostream>
#include <iomanip>
#include <cstring>

#include <Windows.h>

#include "debugger.h"
#include "embedded.h"

using namespace std;

bool isHex(const char* str) {
	for (int i = 0; str[i] != '\0'; i++)
		if (!(('a' <= str[i] && str[i] <= 'f') || ('0' <= str[i] && str[i] <= '9')))
			return false;
	return true;
}

unsigned char* strtobytes(char* str) {
	char input_str[65] = { 0 };
	memset(input_str, '0', 64);
	memcpy(input_str+64-strlen(str), str, strlen(str));
	cout << "input: " << input_str << endl;
	unsigned char* input_key = new unsigned char[32];
	memset(input_key, 0, 32);
	for (int i=0; i<32; i++) {
		char segment[sizeof(char)*2+1] = { 0 };
		char* cursor = input_str+(i*sizeof(char)*2);
		memcpy(segment, cursor, sizeof(char)*2);
		long num = strtol(segment, NULL, 16);
		memcpy(input_key+i, &num, 1);
	}
	return input_key;
}

void print_key(ostream& out, unsigned char* key) {
	for (int i=0; i<32; i++) out << hex << setw(2) << setfill('0') << (unsigned int) key[i];
}

char generate_key[] = {
	'\x53',
	'\x55',
	'\x56',
	'\x57',
	'\x68', '\xef', '\xbe', '\xad', '\xde',
	'\xff', '\x54', '\x24', '\x18',
	'\x8b', '\x7c', '\x24', '\x28',
	'\x6a', '\x20',
	'\x6a', '\x00',
	'\x57',
	'\xff', '\x54', '\x24', '\x2c',
	'\x8b', '\x5c', '\x24', '\x30',
	'\x8b', '\x6C', '\x24', '\x28',
	'\x83', '\xc4', '\x10',
	'\x33', '\xf6',
	'\xff', '\xd5',
	'\x89', '\x44', '\x24', '\x14',
	'\x6a', '\x01',
	'\x8d', '\x44', '\x24', '\x18',
	'\x50',
	'\x8d', '\x0c', '\x3e',
	'\x51',
	'\xff', '\xd3',
	'\x46',
	'\x83', '\xc4', '\x0c',
	'\x83', '\xfe', '\x20',
	'\x7c', '\xe4',
	'\x5f',
	'\x5e',
	'\x5d',
	'\x5b',
	'\xc3',
};
	

int _tmain(int argc, char* argv[])
{
	if (isDbg()) {
		cerr << "arrete de me debugger stp :(" << endl;
		return -1;
	}

	if (argc < 2) {
		cerr << "nan mais faudrait etre un tantinnet serieux si tu veux que ca marche" << endl;
		return -2;
	}

	if (strlen(argv[1]) > 64 || !isHex(argv[1])) {
		cerr << "faudrait peut-etre savoir ecrire par contre..." << endl;
		return -3;
	}

	unsigned char* input_key = strtobytes(argv[1]);
	cout << "input: ";
	print_key(cout, input_key);
	cout << endl << "argv[1]: " << argv[1] << endl;
	
	char* gk = (char*) &strtobytes;
	gk += (char*)&generate_key - (char*) &strtobytes;
	unsigned char* key = new unsigned char[32];
	unsigned char ctr;
	((generate_key_t) gk)(&srand, &rand, &memset, &memcpy, key, &ctr);
	cout << "juste au cas ou, la cle c'est ca: ";
	print_key(cout, key);
	cout << endl;

	if (!memcmp(key, input_key, 32)) {
		cout << "gg" << endl;
	} else {
		cerr << "c'est toujours pas bon, tri agun" << endl;
	}
	delete[] input_key;

	return 0;
}