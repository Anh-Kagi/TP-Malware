#include "stdafx.h"

#include <iostream>
#include <iomanip>
#include <cstring>

#include <Windows.h>

#include "debugger.h"
#include "embedded.h"

using namespace std;

bool isHex(const char* str) {
	for (int i = 0; str[i] != '\0'; i++)
		if (!(('a' <= str[i] && str[i] <= 'f') || ('0' <= str[i] && str[i] <= '9')))
			return false;
	return true;
}

unsigned char* strtobytes(char* str) {
	char input_str[65] = { 0 };
	memset(input_str, '0', 64);
	memcpy(input_str+64-strlen(str), str, strlen(str));
	cout << "input: " << input_str << endl;
	unsigned char* input_key = new unsigned char[32];
	memset(input_key, 0, 32);
	for (int i=0; i<32; i++) {
		char segment[sizeof(char)*2+1] = { 0 };
		char* cursor = input_str+(i*sizeof(char)*2);
		memcpy(segment, cursor, sizeof(char)*2);
		long num = strtol(segment, NULL, 16);
		memcpy(input_key+i, &num, 1);
	}
	return input_key;
}

void print_key(ostream& out, unsigned char* key) {
	for (int i=0; i<32; i++) out << hex << setw(2) << setfill('0') << (unsigned int) key[i];
}

#define KEY 0x42
char generate_key[] = {
	'\x53' ^ KEY,
	'\x55' ^ KEY,
	'\x56' ^ KEY,
	'\x57' ^ KEY,
	'\x68' ^ KEY, '\xef' ^ KEY, '\xbe' ^ KEY, '\xad' ^ KEY, '\xde' ^ KEY,
	'\xff' ^ KEY, '\x54' ^ KEY, '\x24' ^ KEY, '\x18' ^ KEY,
	'\x8b' ^ KEY, '\x7c' ^ KEY, '\x24' ^ KEY, '\x28' ^ KEY,
	'\x6a' ^ KEY, '\x20' ^ KEY,
	'\x6a' ^ KEY, '\x00' ^ KEY,
	'\x57' ^ KEY,
	'\xff' ^ KEY, '\x54' ^ KEY, '\x24' ^ KEY, '\x2c' ^ KEY,
	'\x8b' ^ KEY, '\x5c' ^ KEY, '\x24' ^ KEY, '\x30' ^ KEY,
	'\x8b' ^ KEY, '\x6C' ^ KEY, '\x24' ^ KEY, '\x28' ^ KEY,
	'\x83' ^ KEY, '\xc4' ^ KEY, '\x10' ^ KEY,
	'\x33' ^ KEY, '\xf6' ^ KEY,
	'\xff' ^ KEY, '\xd5' ^ KEY,
	'\x89' ^ KEY, '\x44' ^ KEY, '\x24' ^ KEY, '\x14' ^ KEY,
	'\x6a' ^ KEY, '\x01' ^ KEY,
	'\x8d' ^ KEY, '\x44' ^ KEY, '\x24' ^ KEY, '\x18' ^ KEY,
	'\x50' ^ KEY,
	'\x8d' ^ KEY, '\x0c' ^ KEY, '\x3e' ^ KEY,
	'\x51' ^ KEY,
	'\xff' ^ KEY, '\xd3' ^ KEY,
	'\x46' ^ KEY,
	'\x83' ^ KEY, '\xc4' ^ KEY, '\x0c' ^ KEY,
	'\x83' ^ KEY, '\xfe' ^ KEY, '\x20' ^ KEY,
	'\x7c' ^ KEY, '\xe4' ^ KEY,
	'\x5f' ^ KEY,
	'\x5e' ^ KEY,
	'\x5d' ^ KEY,
	'\x5b' ^ KEY,
	'\xc3' ^ KEY,
};

int _tmain(int argc, char* argv[])
{
	if (isDbg()) {
		cerr << "arrete de me debugger stp :(" << endl;
		return -1;
	}

	if (argc < 2) {
		cerr << "nan mais faudrait etre un tantinnet serieux si tu veux que ca marche" << endl;
		return -2;
	}

	if (strlen(argv[1]) > 64 || !isHex(argv[1])) {
		cerr << "faudrait peut-etre savoir ecrire par contre..." << endl;
		return -3;
	}

	unsigned char* input_key = strtobytes(argv[1]);
	cout << "input: ";
	print_key(cout, input_key);
	cout << endl << "argv[1]: " << argv[1] << endl;
	
	char* gk = (char*) &strtobytes;
	gk += (char*)&generate_key - (char*) &strtobytes;
	unsigned char* key = new unsigned char[32];
	unsigned char ctr;
	for (int i=0; i<sizeof(generate_key); i++) gk[i] ^= KEY;
	((generate_key_t) gk)(&srand, &rand, &memset, &memcpy, key, &ctr);
	for (int i=0; i<sizeof(generate_key); i++) gk[i] = (char) rand();
	cout << "juste au cas ou, la cle c'est ca: ";
	print_key(cout, key);
	cout << endl;

	if (!memcmp(key, input_key, 32)) {
		cout << "gg" << endl;
	} else {
		cerr << "c'est toujours pas bon, tri agun" << endl;
	}
	delete[] input_key;

	return 0;
}